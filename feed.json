{
    "version": "https://jsonfeed.org/version/1",
    "title": "Today I Learned...",
    "description": "",
    "home_page_url": "https://blog.hanielb.com",
    "feed_url": "https://blog.hanielb.com/feed.json",
    "user_comment": "",
    "author": {
        "name": "Haniel Burton"
    },
    "items": [
        {
            "id": "https://blog.hanielb.com/easily-integrate-apex-and-usps-web-tools-api/",
            "url": "https://blog.hanielb.com/easily-integrate-apex-and-usps-web-tools-api/",
            "title": "Integrating APEX and US. Postal Services Web Tools API - Part 1 - #JoelKallmanDay",
            "summary": "Introduction A common requirement in APEX applications, big or small, is to capture address information. Address information is notoriously hard to deal with due to the variety of ways to enter an address and the fact that addresses are constantly changing. The good news is&hellip;",
            "content_html": "<h2>Introduction</h2>\n<p>A common requirement in APEX applications, big or small, is to capture address information. Address information is notoriously hard to deal with due to the variety of ways to enter an address and the fact that addresses are constantly changing. The good news is there are tons of services that provide APIs for address validation and cleansing, the better news is that my favorite Oracle APEX feature, declarative REST Data Sources, makes it easy to interact with modern REST services in matter of minutes with little to no-code needed!</p>\n<p>In this post, I will outline the steps to validate an address using APEX REST Data Sources and the USPS Web Tools API for Address Validation, which is provided FREE of charge by the US. Postal Service.</p>\n<p>Reasons for using USPS Web Tools over other services is that USPS validated addresses are guaranteed to be deliverable and the API returns additional fields to help identify the correct address for apartments, suites, and includes other information such as ZIP+4 extension, or if an address is vacant or considered a business, to name a few.</p>\n<p>Assumptions:</p>\n<ul>\n<li>You need to validate addresses in the United States or Puerto Rico.</li>\n<li>You are on APEX 18.1+ or later\n<ul>\n<li>I use APEX 20.2 for these examples, so some screenshots may not lineup exactly with your environment.</li>\n</ul>\n</li>\n<li>You have the DBA access to configure an ACL, or a DBA to run the script for you.</li>\n<li>You are at least a little familiar with adding components in the APEX Page Builder.</li>\n</ul>\n<p>This blog post is in remembrance of Joel Kallman and my first ever publicly promoted post, which I hope helps to further the collective knowledge of the Oracle community and aids fellow APEX developers build their next greatest app. In the coming weeks I hope to supplement this article with additional tips and tricks for working with this API as well as other Geocoding services. My recent projects have required working with address information and I have tons more notes to share with y'all. :)</p>\n<h3>Step 1. Register and read the the Terms and Conditions</h3>\n<p>Registration is easy and only takes a couple of minutes to fill out some basic information about yourself and optionally how you expect to use the APIs.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-10_17-53-19.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_17-53-19-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_17-53-19-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_17-53-19-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_17-53-19-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_17-53-19-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_17-53-19-2xl.jpg 1600w\"  alt=\"\" width=\"510\" height=\"595\"></figure>\n<p>Within a few minutes, you should get a registration confirmation email with your API credentials and additional information including a list of APIs you're allowed to access, the production URL to access USPS Web Tools Servers, and next steps to begin using the Web Tools.</p>\n<p class=\"msg msg--highlight  \">Don't skip over the Terms and Conditions! There are a few important guidelines to follow that I will summarize, but there may be others that affect you.</p>\n<ul>\n<li>\n<p>USPS data can only be used to facilitate USPS shipping transactions.</p>\n</li>\n<li>\n<p>APIs should only be used on a transactional basis, batch cleansing of a database is not allowed.</p>\n</li>\n<li>\n<p>Your credentials should not be packaged in any code intended for resale or distribution to others, basically don't share your credentials.</p>\n</li>\n</ul>\n<h3>Step 2. <span style=\"text-decoration: line-through;\">Read</span> Review the docs</h3>\n<p>I'll cover the basics here, but the APIs are well documented with examples for several use cases and detailed information about the data returned that is important for all developers to know.</p>\n<p>There are two main sources of documentation. The <a href=\"https://www.usps.com/business/web-tools-apis/general-api-developer-guide.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Step-By-Step Instructions</a> provide important information applicable to all available APIs, while the individual API User's Guides for each API include specific technical details and explain each API in detail. </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-10_18-43-21.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-43-21-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-43-21-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-43-21-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-43-21-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-43-21-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-43-21-2xl.jpg 1600w\"  alt=\"\" width=\"1132\" height=\"755\"></figure>\n<p>All of the docs are available here: <a href=\"https://www.usps.com/business/web-tools-apis/documentation-updates.htm\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.usps.com/business/web-tools-apis/documentation-updates.htm</a></p>\n<p>For this post, I'll mostly refer to information from the Address Information API User Guide: <a href=\"https://www.usps.com/business/web-tools-apis/address-information-api.htm\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.usps.com/business/web-tools-apis/address-information-api.htm</a></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-10_18-42-46.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-42-46-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-42-46-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-42-46-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-42-46-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-42-46-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_18-42-46-2xl.jpg 1600w\"  alt=\"\" width=\"339\" height=\"216\"></figure>\n<p>For list of Starter APIs and samples of test requests, see here: <a href=\"https://www.usps.com/business/web-tools-apis/general-api-developer-guide.htm#_Toc24631965\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.usps.com/business/web-tools-apis/general-api-developer-guide.htm#_Toc24631965</a></p>\n<p>What we cover in this article is essentially Test Request #1, but instead of manually building the XML, making a request to the URL, and then parsing the XML response, we will leverage REST Data Sources and Dynamic Actions to work some APEX magic.<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_17-54-26.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-54-26-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-54-26-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-54-26-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-54-26-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-54-26-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-54-26-2xl.jpg 1600w\"  alt=\"\" width=\"1023\" height=\"603\"></figure>\n<p>By now, you should have a couple of details we'll use next:</p>\n<ol>\n<li>Your API credentials</li>\n<li>The production URL: <a href=\"https://secure.shippingapis.com/ShippingAPI.dll\" target=\"_blank\" rel=\"noopener noreferrer\">https://secure.shippingapis.com/ShippingAPI.dll</a></li>\n</ol>\n<h3>Step 3. Configure an ACL to allow accessing the API URL</h3>\n<p>For APEX on Autonomous Database, run this as the ADMIN user, don't forget to set the principal_name parameter to your application's schema:</p>\n<p><code style=\"font-weight: var(--font-weight-normal);\">BEGIN</code></p>\n<div>\n<div><code>   DBMS_NETWORK_ACL_ADMIN.APPEND_HOST_ACE(</code></div>\n<div><code>         host =&gt; 'secure.shippingapis.com',</code></div>\n<div><code>         ace =&gt;  xs$ace_type(privilege_list =&gt; xs$name_list('http'),</code></div>\n<div><code>                             principal_name =&gt; '&lt;YOUR APPLICATION SCHEMA&gt;',</code></div>\n<div><code>                             principal_type =&gt; xs_acl.ptype_db));</code></div>\n<div><code>END;</code></div>\n</div>\n<p>For other configurations, you may also need to configure an SSL wallet before you can connect. There are several guides available on how to set one up, check this one out by Adrian Png: <a href=\"https://fuzziebrain.com/content/id/1720/\" target=\"_blank\" rel=\"noopener noreferrer\">https://fuzziebrain.com/content/id/1720/</a></p>\n<h3>Step 3. Create a new REST Data Source in an existing APEX app</h3>\n<p>Assuming you already created an APEX application, follow these steps:</p>\n<ul>\n<li>In your APEX app, go to Shared Components &gt; REST Data Sources, click Create &gt;.</li>\n<li>Click Next &gt; to create From Scratch.</li>\n<li>Enter General details.<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-10_19-19-33.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-19-33-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-19-33-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-19-33-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-19-33-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-19-33-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-19-33-2xl.jpg 1600w\"  alt=\"\" width=\"627\" height=\"354\"></figure><br>\n<ul>\n<li>REST Data Source Type: Simple HTTP</li>\n<li>Name: USPS Address API (can be whatever you want)</li>\n<li>URL Endpoint: <a href=\"https://secure.shippingapis.com/ShippingAPI.dll\" target=\"_blank\" rel=\"noopener noreferrer\">https://secure.shippingapis.com/ShippingAPI.dll</a></li>\n</ul>\n</li>\n<li>Click Next &gt; to accept Remote Server defaults.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-10_19-22-06.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-22-06-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-22-06-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-22-06-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-22-06-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-22-06-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-22-06-2xl.jpg 1600w\"  alt=\"\" width=\"629\" height=\"354\"></figure></li>\n<li>Click Advanced on the Authentication step, we'll include credentials as part of the XML request payload.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-10_19-23-25.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-23-25-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-23-25-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-23-25-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-23-25-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-23-25-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-10_19-23-25-2xl.jpg 1600w\"  alt=\"\" width=\"630\" height=\"356\"></figure></li>\n<li>Now we will prepare sample XML that follows the format and meets all requirements as outlined in the documentation. We will use this to auto-discover the data profile for the response returned by the Address API.\n<ul>\n<li>See here for a full description of the request, this will explain exactly what is required and what the XML request should look like: <a href=\"https://www.usps.com/business/web-tools-apis/address-information-api.htm#_Toc39492053\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.usps.com/business/web-tools-apis/address-information-api.htm#_Toc39492053</a></li>\n<li>Example from the docs: <figure class=\"post__image\"><img loading=\"lazy\"  style=\"outline: 3px solid rgba(var(--primary-color-rgb), 0.55)  !important;\" src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_10-05-25.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-05-25-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-05-25-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-05-25-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-05-25-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-05-25-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-05-25-2xl.jpg 1600w\"  alt=\"\" width=\"708\" height=\"239\"></figure></li>\n<li><strong>Don't forget to replace \"XXXXXXXXX\" with your USERID from the registration email.</strong></li>\n<li>An important detail is that the API allows up to 5 individual &lt;address&gt;&lt;/address&gt; nodes inside each &lt;AddressValidateRequest&gt;. We will leverage this to pass multiple addresses in our XML request so that APEX can fully discover all available fields.</li>\n<li>Setting the &lt;Revision&gt; property to 1 will return additional data in the response, we will also set this in our sample XML request to let APEX do the heavy lifting for us.</li>\n<li>Here is a sample XML request I've prepared with addresses that will return a combination of all available fields:<br>\n<div>\n<div><code>&lt;AddressValidateRequest USERID=\"XXXXXXXXX\"&gt;</code></div>\n<div><code>&lt;Revision&gt;1&lt;/Revision&gt;</code></div>\n<div><code>&lt;Address&gt;&lt;FirmName&gt;&lt;/FirmName&gt;&lt;Address1&gt;6406 IVY LANE&lt;/Address1&gt;&lt;Address2&gt;SUITE 100&lt;/Address2&gt;&lt;City&gt;Greenbelt&lt;/City&gt;&lt;State&gt;MD&lt;/State&gt;&lt;Zip5&gt;20770&lt;/Zip5&gt;&lt;Zip4&gt;&lt;/Zip4&gt;&lt;/Address&gt;</code></div>\n<div><code>&lt;Address&gt;&lt;FirmName&gt;Johnson Manufacturing&lt;/FirmName&gt;&lt;Address1&gt;SUITE 222&lt;/Address1&gt;&lt;Address2&gt;500 E MAIN ST&lt;/Address2&gt;&lt;City&gt;Kansas City&lt;/City&gt;&lt;State&gt;MO&lt;/State&gt;&lt;Zip5&gt;64100&lt;/Zip5&gt;&lt;Zip4&gt;&lt;/Zip4&gt;&lt;/Address&gt;</code></div>\n<div><code>&lt;Address&gt;&lt;FirmName/&gt;&lt;Address1&gt;APT 332&lt;/Address1&gt;&lt;Address2&gt;3158 nw expressway&lt;/Address2&gt;&lt;City&gt;Oklahoma City&lt;/City&gt;&lt;State&gt;ok&lt;/State&gt;&lt;Zip5&gt;73112&lt;/Zip5&gt;&lt;Zip4/&gt;&lt;/Address&gt;</code></div>\n<div><code>&lt;/AddressValidateRequest&gt;</code></div>\n</div>\n</li>\n</ul>\n</li>\n<li>Add two Query String variable parameters, API and XML, then click Discover &gt;.<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_10-13-24.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-13-24-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-13-24-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-13-24-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-13-24-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-13-24-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-13-24-2xl.jpg 1600w\"  alt=\"\" width=\"630\" height=\"400\"></figure><br>\n<ul>\n<li>Parameter Name: API\n<ul>\n<li>Type: Query String variable</li>\n<li>Value: Verify</li>\n<li>Is Static: Switched On</li>\n</ul>\n</li>\n<li>Parameter Name: XML\n<ul>\n<li>Type Query String variable</li>\n<li>Value: \"Sample &lt;AddressValidateRequest&gt; XML from previous step\"</li>\n<li>Is Static: Switched Off</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Review the results of the auto-discovered data profile, it should look like this:<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_10-17-27.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-17-27-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-17-27-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-17-27-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-17-27-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-17-27-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-17-27-2xl.jpg 1600w\"  alt=\"\" width=\"1810\" height=\"636\"></figure><br>Note: There are two additional columns, CENTRALDELIVERYPOINT and VACANT that aren't shown in the preview, but you can check for them by clicking the Data Profile tab, then scroll down and click Next &gt; to view the last two columns.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_10-20-46.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-20-46-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-20-46-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-20-46-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-20-46-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-20-46-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-20-46-2xl.jpg 1600w\"  alt=\"\" width=\"1892\" height=\"981\"></figure><br>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_10-21-23.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-21-23-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-21-23-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-21-23-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-21-23-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-21-23-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-21-23-2xl.jpg 1600w\"  alt=\"\" width=\"1869\" height=\"297\"></figure>\n</li>\n<li>Finally, click Create REST Data Source to finish. You should now see the USPS Address API listed:<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_10-24-15.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-24-15-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-24-15-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-24-15-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-24-15-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-24-15-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-24-15-2xl.jpg 1600w\"  alt=\"\" width=\"1493\" height=\"393\"></figure></li>\n<li>Click the USPS Address API name to view and edit the REST Data Source properties.</li>\n<li>Then click Edit Data Profile:<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_10-28-22.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-28-22-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-28-22-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-28-22-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-28-22-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-28-22-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-28-22-2xl.jpg 1600w\"  alt=\"\" width=\"1491\" height=\"808\"></figure></li>\n<li>Most of the time, the columns are in the correct order, but if not we can quickly fix that here. Just click Edit, then set the correct sequence number. You can also click Resequence Columns to set the sequence numbers by steps of 10, which will give you enough space between numbers to move them around.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_10-29-58.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-29-58-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-29-58-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-29-58-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-29-58-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-29-58-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_10-29-58-2xl.jpg 1600w\"  alt=\"\" width=\"1250\" height=\"831\"></figure><br>\n<ul>\n<li>FIRMNAME should be first, followed by ADDRESS1 and ADDRESS2.</li>\n</ul>\n</li>\n<li>Next, fix the Data Type for the ZIP5 and ZIP4 columns by selecting Varchar2 from the drop-down list.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_15-10-31.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-10-31-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-10-31-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-10-31-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-10-31-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-10-31-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-10-31-2xl.jpg 1600w\"  alt=\"\" width=\"1248\" height=\"173\"></figure><br>\n<ul>\n<li>(Reason for this change is that some valid ZIP codes use a leading zero, which will not be stored or displayed correctly if we leave this as a Number Data Type.</li>\n</ul>\n</li>\n<li>Click Apply Changes at the top of the page to save the new Sequences and Data Type changes to the Data Profile.</li>\n</ul>\n<h2>Step 4. Create a new Blank Page and add components</h2>\n<ul>\n<li>Create a new Blank Page, later on we will manually add a form component to capture an address and a classic report to show the validated address.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_15-19-15.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-19-15-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-19-15-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-19-15-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-19-15-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-19-15-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-19-15-2xl.jpg 1600w\"  alt=\"\" width=\"893\" height=\"537\"></figure><br>\n<ul>\n<li>(Note: You may already have an address form in an existing app that you want to validate, but I encourage you to try this in a new page so you can figure out the best approach to validating you address data.)</li>\n</ul>\n</li>\n<li>Pick a page number and enter a Name for the new page, it can be anything that makes sense for your app, such as Enter Address, then click Next &gt;.<figure class=\"post__image\"><img loading=\"lazy\"  style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\" src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_15-20-52.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-20-52-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-20-52-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-20-52-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-20-52-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-20-52-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-20-52-2xl.jpg 1600w\"  alt=\"\" width=\"899\" height=\"540\"></figure></li>\n<li>Select a Navigation Menu option that makes sense. For this demo, I chose to Create a new navigation menu entry called \"Enter Address,\" then click Next &gt; and Finish on the final wizard step.<figure class=\"post__image\"><img loading=\"lazy\"  style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\" src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_15-23-34.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-23-34-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-23-34-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-23-34-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-23-34-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-23-34-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-23-34-2xl.jpg 1600w\"  alt=\"\" width=\"894\" height=\"335\"></figure></li>\n<li>In your new page, create a new Static Content Region called Enter Address and add the following Text Field items with the listed properties:\n<ul>\n<li>FirmName\n<ul>\n<li>Type: Text Field</li>\n<li>Label: Company</li>\n<li>Template: Optional - Floating</li>\n</ul>\n</li>\n<li>Address1\n<ul>\n<li>Type: Text Field</li>\n<li>Label: APT/SUITE/BOX</li>\n<li>Template: Optional - Floating</li>\n</ul>\n</li>\n<li>Address2\n<ul>\n<li>Type: Text Field</li>\n<li>Label: Street Address</li>\n<li>Template: Required - Floating</li>\n</ul>\n</li>\n<li>City\n<ul>\n<li>Type: Text Field</li>\n<li>Label: City</li>\n<li>Template: Required - Floating</li>\n</ul>\n</li>\n<li>State\n<ul>\n<li>Type: Text Field</li>\n<li>Label: State</li>\n<li>Template: Required - Floating</li>\n<li>Width: 2 characters</li>\n</ul>\n</li>\n<li>Zip5\n<ul>\n<li>Type: Text Field</li>\n<li>Label: ZIP</li>\n<li>Template: Optional - Floating</li>\n<li>Width: 5 characters</li>\n</ul>\n</li>\n<li>Zip4\n<ul>\n<li>Type: Text Field</li>\n<li>Label: ZIP+4</li>\n<li>Template: Optional - Floating</li>\n<li>Width: 4 characters</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Your page should now look something like this:<figure class=\"post__image\"><img loading=\"lazy\"  style=\"outline: 3px solid rgba(var(--primary-color-rgb), 0.55)  !important;\" src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_15-42-44.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-42-44-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-42-44-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-42-44-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-42-44-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-42-44-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-42-44-2xl.jpg 1600w\"  alt=\"\" width=\"1491\" height=\"754\"></figure></li>\n<li>Next, add a new Classic Report region to your page called Validated Address with the following properties:<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_15-50-25-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-50-25-2-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-50-25-2-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-50-25-2-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-50-25-2-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-50-25-2-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-50-25-2-2xl.jpg 1600w\"  alt=\"\" width=\"319\" height=\"345\"></figure><br>\n<ul>\n<li>Location: REST Source</li>\n<li>REST Source: USPS Address API</li>\n<li>Page Items to Submit: All  items in the Enter Address Region: <code>P9_FIRMNAME,P9_ADDRESS1,P9_ADDRESS2,P9_CITY,P9_STATE,P9_ZIP5,P9_ZIP4</code></li>\n</ul>\n</li>\n<li>Find the report region on the left sidebar, click the &gt; to expand the Parameters list, and select the XML parameter:<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_15-53-06-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-53-06-2-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-53-06-2-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-53-06-2-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-53-06-2-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-53-06-2-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_15-53-06-2-2xl.jpg 1600w\"  alt=\"\" width=\"1215\" height=\"692\"></figure><br><br></li>\n<li>On the right sidebar, change the Type to SQL Query (return single value) and paste the query below. <span style=\"text-decoration: underline;\">Don't forget to change the XXXXXXX with your USERID and to make sure the bind variables match your item names accordingly</span>, mine are on page 9 so they're prefixed with P9_.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_16-00-34.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-00-34-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-00-34-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-00-34-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-00-34-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-00-34-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-00-34-2xl.jpg 1600w\"  alt=\"\" width=\"639\" height=\"400\"></figure><br>\n<ul>\n<li>\n<div>Example Query:</div>\n<div><code style=\"font-family: var(--font-monospace);\">select</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">    xmlelement(\"AddressValidateRequest\", xmlattributes ('XXXXXXX' as \"USERID\"),</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">        xmlelement(\"Revision\", 1), --1 returns all fields</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">            xmlagg(</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">                xmlelement(\"Address\",</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">                    xmlelement(\"FirmName\", :p9_firmname),</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">                    xmlelement(\"Address1\", :p9_address1),</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">                    xmlelement(\"Address2\", :p9_address2),</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">                    xmlelement(\"City\", :p9_city ),</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">                    xmlelement(\"State\", :p9_state),</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">                    xmlelement(\"Zip5\", :p9_zip5),</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">                    xmlelement(\"Zip4\", :p9_zip4)</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">                )</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">            )</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">        ) XMLVAL</code></div>\n<div><code style=\"font-family: var(--font-monospace);\">from dual</code></div>\n</li>\n<li>\n<pre>Disclaimer: A better practice is to get the USERID from an Application Item that is computed by a stored procedure or function so that the USERID value is stored in the database and not hard-coded into your application, but that is beyond the scope of this article.</pre>\n</li>\n</ul>\n</li>\n<li>Add a Text[Hot] button to the Enter Address Region with the following properties:<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_16-22-36.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-22-36-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-22-36-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-22-36-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-22-36-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-22-36-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-22-36-2xl.jpg 1600w\"  alt=\"\" width=\"1174\" height=\"528\"></figure><br>\n<ul>\n<li>Button Name: Validate</li>\n<li>Label: Validate</li>\n<li>Region: Enter Address</li>\n<li>Button Position: Create</li>\n<li>Action: Defined by Dynamic Action</li>\n</ul>\n</li>\n<li>Create a new Dynamic Action with these properties:<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_16-31-42.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-31-42-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-31-42-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-31-42-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-31-42-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-31-42-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-31-42-2xl.jpg 1600w\"  alt=\"\" width=\"1125\" height=\"412\"></figure><br>\n<ul>\n<li>DA Name: Refresh Validated Address</li>\n<li>Event: Click</li>\n<li>Selection Type: Button</li>\n<li>Button: Validate</li>\n<li>Properties for the True Action:<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_16-30-05.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-30-05-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-30-05-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-30-05-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-30-05-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-30-05-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_16-30-05-2xl.jpg 1600w\"  alt=\"\" width=\"1125\" height=\"489\"></figure>\n<ul>\n<li>Action: Refresh</li>\n<li>Selection Type: Region</li>\n<li>Region: Validated Address</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Save and Run the page!</li>\n</ul>\n<h2>Step 5. Test your page</h2>\n<p>To test, simply fill out the address form with at least the Street Address, City and State  fields, then click Validate. After a short moment, the Validated Address should appear in the bottom region.<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_17-08-29.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-08-29-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-08-29-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-08-29-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-08-29-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-08-29-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-08-29-2xl.jpg 1600w\"  alt=\"\" width=\"1100\" height=\"946\"></figure>\n<p>Since our request had Revision tag set to 1, you will see other columns after the ZIP4 field, these columns provide additional information about the validated address that make this integration more powerful than simply using another service such as Google Places Autocomplete. I won't go into all the details of each additional column, but I highly encourage you to read all of the descriptions in the docs:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.hanielb.com/media/posts/6/2021-10-11_17-12-45.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-12-45-xs.jpg 300w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-12-45-sm.jpg 480w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-12-45-md.jpg 768w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-12-45-lg.jpg 1024w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-12-45-xl.jpg 1360w ,https://blog.hanielb.com/media/posts/6/responsive/2021-10-11_17-12-45-2xl.jpg 1600w\"  alt=\"\" width=\"742\" height=\"964\"></figure>\n<p><a href=\"https://www.usps.com/business/web-tools-apis/address-information-api.htm#_Toc39492057\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.usps.com/business/web-tools-apis/address-information-api.htm#_Toc39492057</a></p>\n<h3>Next Steps</h3>\n<p>I hope this guide helps readers understand how easy it is to start integrating the USPS Address Validation API into your Oracle APEX applications using simple and declarative options such as REST Data Sources and Dynamic Actions with very little code. </p>\n<p>While I don't have a specific number of articles to write on this topic, there are many more ways to use the API and ideas on how to implement them that I want to share with everyone in the coming weeks.</p>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "Haniel Burton"
            },
            "tags": [
                   "REST",
                   "OrclAPEX",
                   "JoelKallmanDay",
                   "Dynamic Actions"
            ],
            "date_published": "2021-10-11T20:50:00-07:00",
            "date_modified": "2021-10-11T20:50:00-07:00"
        },
        {
            "id": "https://blog.hanielb.com/setting-page-item-values-with-js-from-a-report-or-link/",
            "url": "https://blog.hanielb.com/setting-page-item-values-with-js-from-a-report-or-link/",
            "title": "Using JavaScript to set page item values from a report in APEX",
            "summary": " Simple use case, you can set multiple page items from a link in a report region by calling apex.item().set_value multiple times in the same statement: javascript:apex.item(\"P4_LOC\").setValue(\"#LOC#\"); apex.item(\"P4_DEPTNO\").setValue(\"#DEPTNO#\"); A better practice would be to create a JavaScript function that does your dirty deeds and then&hellip;",
            "content_html": "<p><!-- wp:paragraph --></p>\n<p>Simple use case, you can set multiple page items from a link in a report region by calling apex.item().set_value multiple times in the same statement:</p>\n<p><code>javascript:apex.item(\"P4_LOC\").setValue(\"#LOC#\"); apex.item(\"P4_DEPTNO\").setValue(\"#DEPTNO#\");</code></p>\n<p>A better practice would be to create a JavaScript function that does your dirty deeds and then call that once:</p>\n<p><code>javascript:MyFunction(#LOC#, #DEPTNO#);</code></p>\n<p>An advanced method would be to call an AJAX process, but sometimes that's too much.</p>\n<p> </p>\n<p><!-- /wp:paragraph --></p>",
            "author": {
                "name": "Haniel Burton"
            },
            "tags": [
                   "OrclAPEX",
                   "JavaScript"
            ],
            "date_published": "2021-10-04T18:38:22-07:00",
            "date_modified": "2021-10-11T18:01:03-07:00"
        }
    ]
}
